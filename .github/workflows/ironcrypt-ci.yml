name: IronCrypt CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  # Nom de l'image Docker pour éviter la répétition
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ironcrypt

jobs:
  # --- JOB 1: Vérifier le code et lancer les tests ---
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Installer la toolchain Rust stable (action recommandée)
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Mettre en cache les dépendances pour accélérer les builds futurs
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # Lancer les tests en mode debug (plus rapide)
      - name: Run tests
        run: cargo test --verbose

  # --- JOB 2: Construire et pousser l'image Docker ---
  build_and_push:
    name: Build and Push Docker Image
    # Ce job ne s'exécute que si le job 'test' a réussi
    needs: test
    runs-on: ubuntu-latest
    # Ne s'exécute que lors d'un push sur la branche master, pas sur les pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Action recommandée pour se connecter à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Met en place QEMU pour les builds multi-architectures (bonne pratique)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Met en place Docker Buildx pour des builds plus rapides et un meilleur cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Action moderne qui construit et pousse l'image en une seule étape
      # et gère le cache de manière intelligente.
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Crée deux tags : 'latest' et un tag basé sur le hash du commit
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          # Utilise le cache de GitHub pour accélérer les builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
